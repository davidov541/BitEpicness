`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    13:19:31 05/19/2010 
// Design Name: 
// Module Name:    BitEpicness 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module BitEpicness(input clk, input Reset, input [31:0] INPUT_interupt, inout [15:0] INOUT_PortData, output OUTPUT_WritePort,
		output OUTPUT_ReadPort, output [4:0] OUTPUT_PortAddress, output [15:0] iAddress, input [15:0] iDataOut, 
		output [15:0] dAddress, output [15:0] dDataIn, output dWrite, input [15:0] dDataOut);
		
		// WB Wires
		wire[15:0] regwritedata;

		// MEM-WB Registers
		reg[15:0] WB_Data; 
		reg[3:0] WB_RegTarget;
		reg[4:0] WB_WB;
		reg[15:0] DisplayReg;

		// MEM-WB Wires
		wire[15:0] wbmemout, wbdata;
		
		// EX-MEM Registers
		reg[15:0] MEM_EXOut;
		reg[15:0] MEM_RegA;
		reg[15:0] MEM_RegC;
		reg[3:0] MEM_RegTarget;
		reg[6:0] MEM_MEM; 
		reg[4:0] MEM_WB;
		reg[12:0] MEM_PC;
		reg MEM_ALUOverflow;
		
		// EX-MEM Wires
		wire[15:0] alusrca, alusrcb, out, aluout, seimm,coprocessorData;
		wire over;
		wire interuptOccurs;
		wire interuptEnable, interuptDisable;
		wire [4:0] interuptNumber;
		
		// REG-EX Registers
		reg[11:0] EX_EX;
		reg[6:0] EX_MEM;
		reg[4:0] EX_WB;
		reg[15:0] EX_RegA;
		reg[15:0] EX_RegB;
		reg[15:0] EX_RegC;
		reg[6:0] EX_Imm;
		reg[8:0] EX_JTarget; 
		reg[3:0] EX_RegTarget;
		reg[15:0] EX_Instruction;
		reg[12:0] EX_PC;
		
		// REG-EX Wires
		wire[15:0] rega, forwardedrega, regb, forwardedregb, regc, forwardedregc;
		wire[3:0] regwriteaddr;
		
		//TRANS-REG Registers
		reg REG_REG;
		reg[11:0] REG_EX;
		reg[6:0] REG_MEM;
		reg[4:0] REG_WB;
		reg[3:0] REG_RegAddrA; 
		reg[3:0] REG_RegAddrB;
		reg[3:0] REG_RegAddrC;
		reg[6:0] REG_Imm;
		reg[8:0] REG_JTarget;
		reg[15:0] REG_Instruction;
		reg[12:0] REG_PC;
		
		// TRANS_REG Wires
		wire[4:0] opcode;
		wire[2:0] funccode;
		wire[3:0] regaddra, regaddrb, regaddrc;
		wire[6:0] regimm;
		wire[8:0] regjtarget;
		wire stall;
		wire [1:0] _reg;
		wire[11:0] ex;
		wire[6:0] mem;
		wire[4:0] wb;
		wire [15:0] Instruction;
		
		// ProgramCounter Registers
		reg[8:0] PC;
		
		// ProgramCounter Wires
		wire[8:0] pc;
		wire regmask, exmask, memmask;
		wire wbmask;
		wire interupt;
		
		// Instruction Fetch Phase
		//InstructionMemory instmem(~clk, PC, Instruction);
		assign Instruction = iDataOut;
		assign iAddress = PC;
		
		// Program Counter Phase
		PCControl pcc(PC, REG_REG, REG_JTarget, EX_EX[6], EX_RegA[8:0], MEM_MEM[6], MEM_MEM[5:4], MEM_EXOut, MEM_ALUOverflow, MEM_RegC[12:0], interupt,
			pc, regmask, exmask, memmask, wbmask, stall);
		
		// Translation Phase
		InstructionTranslate it(Instruction, opcode, funccode, regaddra, regaddrb, regaddrc, regimm, regjtarget);
		Control ctrl(opcode, funccode, clk, Reset, _reg, ex, mem, wb, regmask);
		
		StallDetector s0(.clock(clk),.reset(Reset),.opcode(opcode),.regA(regaddra),.regB(regaddrb),.regC(regaddrc),.stall(stall));

		// Register Phase
		RegisterFile rf(REG_RegAddrA, REG_RegAddrB, REG_RegAddrC, WB_RegTarget, regwritedata, WB_WB[0], clk, Reset, rega, regb, regc);
				
		assign regwriteaddr = (REG_WB[2:1] == 2'b00) ? REG_RegAddrA
									: (REG_WB[2:1] == 2'b01) ? 4'b1110
									: (REG_WB[2:1] == 2'b10) ? 4'b1111
									: 4'bxxxx;
		
		assign forwardedrega = (REG_RegAddrA == 4'b0000) ? 16'b0000000000000000
				: (EX_WB[0] == 1 && EX_RegTarget == REG_RegAddrA) ? out
				: (MEM_WB[0] == 1 && MEM_RegTarget == REG_RegAddrA) ? wbdata
				: (WB_WB[0] == 1 && WB_RegTarget == REG_RegAddrA) ? regwritedata
				: rega;
					
		assign forwardedregb = (REG_RegAddrB == 4'b0000) ? 16'b0000000000000000
				: (EX_WB[0] == 1 && EX_RegTarget == REG_RegAddrB) ? out
				: (MEM_WB[0] == 1 && MEM_RegTarget == REG_RegAddrB) ? wbdata
				: (WB_WB[0] == 1 && WB_RegTarget == REG_RegAddrB) ? regwritedata
				: regb;
				
		assign forwardedregc = (REG_RegAddrC == 4'b0000) ? 16'b0000000000000000
				: (EX_WB[0] == 1 && EX_RegTarget == REG_RegAddrC) ? out
				: (MEM_WB[0] == 1 && MEM_RegTarget == REG_RegAddrC) ? wbdata
				: (WB_WB[0] == 1 && WB_RegTarget == REG_RegAddrC) ? regwritedata
				: regc;

		// Execution Phase
		assign alusrca = (EX_EX[0] == 0) ? EX_RegA : EX_RegB;
		SignExtend7 se7(EX_Imm, seimm);
		assign alusrcb = (EX_EX[2:1] == 2'b00) ? EX_RegC 
							: (EX_EX[2:1] == 2'b01) ? seimm 
							: (EX_EX[2:1] == 2'b10) ? EX_RegB
							: (EX_EX[2:1] == 2'b11) ? 16'b0000000000000000
							: 16'bxxxxxxxxxxxxxxxx;
		ALU alu(alusrca, alusrcb, EX_EX[5:3], clk, aluout, over);
		assign out = (EX_EX[7] == 1'b1) ? coprocessorData : aluout;
		Coprocessor c0(.clock(clk), .reset(Reset), .regData(EX_RegA),.syscallCode(EX_Instruction[7:0]),.currentAddress({3'b000, MEM_PC}),.dataOut(coprocessorData),.interuptIn(interuptOccurs),
			.interuptOut(interupt),.enable(EX_EX[7]),.interuptAddress(interuptNumber),.portData(INOUT_PortData),.portAddress(OUTPUT_PortAddress),.readPort(OUTPUT_ReadPort),
			.writePort(OUTPUT_WritePort), .interuptEnable(interuptEnable), .interuptDisable(interuptDisable));

		InteruptHandler i0(.clock(clk),.reset(Reset),.interuptsIn(INPUT_interupt),.enableInterupts(interuptEnable),.disableInterupts(interuptDisable),
			.interuptOut(interuptOccurs),.interuptNumber(interuptNumber));
		// Memory Phase

		assign dWrite = MEM_MEM[3];
		assign dAddress = MEM_EXOut;
		assign dDataIn = MEM_RegA;
		assign wbmemout = dDataOut;
		
		assign wbdata =  (MEM_MEM[2:0] == 3'b000) ? MEM_EXOut 
							: (MEM_MEM[2:0] == 3'b001) ? wbmemout
							: (MEM_MEM[2:0] == 3'b010) ? EX_Instruction
							: (MEM_MEM[2:0] == 3'b011) ? {3'b000, MEM_PC + 1}
							: (MEM_MEM[2:0] == 3'b101) ? MEM_RegA
							: 16'bxxxxxxxxxxxxxxxx;
		
		// Writeback Phase									
		assign regwritedata = WB_Data;

		always@(posedge clk or posedge Reset)
			if (Reset == 1)
			begin
				WB_Data <= 16'b0000000000000000; 
				WB_RegTarget <= 4'b0000;
				WB_WB <= 5'b00000;
				DisplayReg <= 16'b0000000000000000;
				
				MEM_EXOut <= 16'b0000000000000000;
				MEM_ALUOverflow <= 1'b0;
				MEM_RegA <= 16'b0000000000000000;
				MEM_RegC <= 16'b0000000000000000;
				MEM_RegTarget <= 4'b0000;
				MEM_MEM <= 7'b0000000; 
				MEM_WB <= 5'b00000;
				MEM_PC <= 13'b0000000000000;
				
				REG_REG <= 1'b0;
				REG_EX <= 12'b000000000000;
				REG_MEM <= 7'b0000000;
				REG_WB <= 5'b00000;
				REG_RegAddrA <= 4'b0000;
				REG_RegAddrB <= 4'b0000;
				REG_RegAddrC <= 4'b0000;
				REG_Imm <= 7'b0000000;
				REG_JTarget <= 9'b000000000;
				REG_PC <= 13'b0000000000000;
				REG_Instruction <= 16'b0000000000000000;
				
				EX_EX <= 12'b000000000000;
				EX_MEM <= 7'b0000000;
				EX_WB <= 5'b00000;
				EX_RegTarget <= 4'b0000;
				EX_RegA <= 16'b0000000000000000;
				EX_RegB <= 16'b0000000000000000;
				EX_RegC <= 16'b0000000000000000;
				EX_Imm <= 7'b0000000;
				EX_JTarget <= 9'b000000000;
				EX_Instruction <= 16'b0000000000000000;
				EX_PC <= 13'b0000000000000;
				
				PC <= 13'b0000000000000;
			end
			else
			begin				
				WB_Data <= wbdata;
				//if (wbmask === 1'b0)
				//	WB_WB <= MEM_WB;
				//else
				//	WB_WB <= 5'b00000;
				WB_WB <= (wbmask == 1'b0) ? MEM_WB : 5'b00000;
				
				WB_RegTarget <= MEM_RegTarget;
				
				if (WB_WB[3] == 1'b1)
					DisplayReg <= WB_Data;
			    
				if (memmask === 1'b0)
				begin
					MEM_MEM <= EX_MEM;
					MEM_WB <= EX_WB;
				end
				else
				begin
					MEM_MEM <= 7'b0000000;
					MEM_WB <= 5'b00000;
				end
				MEM_RegTarget <= EX_RegTarget; 
				MEM_RegA <= EX_RegA;
				MEM_RegC <= EX_RegC;
				MEM_EXOut <= out;
				MEM_PC <= (memmask) ? MEM_PC : EX_PC;
				MEM_ALUOverflow <= over;
			
				EX_RegA <= forwardedrega;
				EX_RegB <= forwardedregb;
				EX_RegC <= forwardedregc;
				if (exmask === 1'b0)
				begin
					EX_EX <= REG_EX;
					EX_MEM <= REG_MEM;
					EX_WB <= REG_WB;
				end
				else
				begin
					EX_EX <= 12'b000000000000;
					EX_MEM <= 7'b0000000;
					EX_WB <= 5'b00000;
				end
				EX_RegTarget <= regwriteaddr;
				EX_Imm <= REG_Imm;
				EX_JTarget <= REG_JTarget;
				EX_Instruction <= REG_Instruction;
				EX_PC <= (memmask) ? MEM_PC : (exmask) ? EX_PC : REG_PC;
				
				REG_REG <= _reg[0] & ~regmask;
				if (regmask === 1'b0)
				begin
					REG_EX <= ex;
					REG_MEM <= mem;
					REG_WB <= wb;
				end
				else
				begin
					REG_EX <= 12'b000000000000;
					REG_MEM <= 7'b0000000;
					REG_WB <= 5'b00000;
				end
				REG_RegAddrA <= regaddra;
				REG_RegAddrB <= regaddrb;
				REG_RegAddrC <= regaddrc;
				REG_Imm <= regimm;
				REG_JTarget <= regjtarget;
				REG_Instruction <= Instruction;
				//REG_PC <= (_reg[1] || regmask) ? REG_PC : (exmask) ? EX_PC : (memmask) ? MEM_PC : PC;
				REG_PC <= (memmask) ? MEM_PC : (exmask) ? EX_PC : (_reg[1] || regmask) ? REG_PC : PC;
				
				PC <= pc;
				
			end

endmodule
